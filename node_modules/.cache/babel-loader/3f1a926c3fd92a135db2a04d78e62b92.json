{"ast":null,"code":"import _defineProperty from \"C:\\\\Programaci\\xF3nC\\\\movies\\\\2. React RMDB - Start Here\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\Programaci\\xF3nC\\\\movies\\\\2. React RMDB - Start Here\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nexport const useMovieFetch = movieId => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const fetchData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"?api_key=\").concat(API_KEY);\n      const result = await (await fetch(endpoint)).json();\n      const creditsEndpoint = \"{API_URL}movie/\".concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      const directors = credistResult.crew.filter(member => member.job === 'Director');\n      setState(_objectSpread({}, result, {\n        actors: creditsResult.cast,\n        directors\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieId]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  return [state, loading, error];\n};","map":{"version":3,"sources":["C:\\ProgramaciÃ³nC\\movies\\2. React RMDB - Start Here\\src\\components\\hooks\\UseMovieFetch.js"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","creditsEndpoint","creditsResult","directors","credistResult","crew","filter","member","job","actors","cast"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AAAA,oBACVN,QAAQ,CAAC,EAAD,CADE;AAAA;AAAA,QAC7BO,KAD6B;AAAA,QACtBC,QADsB;;AAAA,qBAENR,QAAQ,CAAC,KAAD,CAFF;AAAA;AAAA,QAE7BS,OAF6B;AAAA,QAEpBC,UAFoB;;AAAA,qBAGVV,QAAQ,CAAC,KAAD,CAHE;AAAA;AAAA,QAG7BW,KAH6B;AAAA,QAGtBC,QAHsB;;AAKpC,QAAMC,SAAS,GAAGX,WAAW,CAAC,YAAY;AACtCU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACA,YAAMI,QAAQ,aAAMX,OAAN,mBAAsBG,OAAtB,sBAAyCF,OAAzC,CAAd;AACA,YAAMW,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAArB;AACA,YAAMC,eAAe,4BAAqBZ,OAArB,8BAAgDF,OAAhD,CAArB;AACA,YAAMe,aAAa,GAAG,MAAM,CAAC,MAAMH,KAAK,CAACE,eAAD,CAAZ,EAAgCD,IAAhC,EAA5B;AACA,YAAMG,SAAS,GAAGC,aAAa,CAACC,IAAd,CAAmBC,MAAnB,CACdC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAIAjB,MAAAA,QAAQ,mBACDO,MADC;AAEJW,QAAAA,MAAM,EAAEP,aAAa,CAACQ,IAFlB;AAGJP,QAAAA;AAHI,SAAR;AAOH,KAhBD,CAgBE,OAAMT,KAAN,EAAa;AACXC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACGF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACP,GAxB4B,EAwB1B,CAACJ,OAAD,CAxB0B,CAA7B;AA0BAL,EAAAA,SAAS,CAAE,MAAM;AACbY,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA,SAAO,CAACN,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACH,CApCM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { API_URL, API_KEY } from '../../config';\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const fetchData = useCallback(async () => {\r\n        setError(false);\r\n        setLoading(true);\r\n\r\n        try {\r\n            const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n            const result = await (await fetch(endpoint)).json();\r\n            const creditsEndpoint = `{API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n            const creditsResult = await (await fetch(creditsEndpoint)). json();\r\n            const directors = credistResult.crew.filter(\r\n                member => member.job === 'Director'\r\n            );\r\n\r\n            setState({\r\n                ...result,\r\n                actors: creditsResult.cast,\r\n                directors,\r\n            })\r\n\r\n\r\n        } catch(error) {\r\n            setError(true);\r\n        }\r\n            setLoading(false);\r\n    }, [movieId])\r\n\r\n    useEffect (() => {\r\n        fetchData();\r\n    }, [fetchData])\r\n\r\n    return [state, loading, error];\r\n}"]},"metadata":{},"sourceType":"module"}