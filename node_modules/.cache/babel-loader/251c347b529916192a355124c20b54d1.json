{"ast":null,"code":"import _slicedToArray from \"C:\\\\Programaci\\xF3nC\\\\movies\\\\2. React RMDB - Start Here\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nexport const useMovieFetch = movieId => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  const fecthData = useCallback(async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const endpoint = \"\".concat(API_URL, \"movie/\").concat(movieId, \"?api_key=\").concat(API_KEY);\n      const resut = await (await fetch(endpoint)).json();\n      console.log(result);\n      const creditsEndpoint = \"{API_URL}movie/\".concat(movieId, \"/credits?api_key=\").concat(API_KEY);\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      console.log(creditsResult);\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }, [movieId]);\n  useEffect(() => {\n    fecthData();\n  });\n  return [state, loading, error];\n};","map":{"version":3,"sources":["C:\\ProgramaciÃ³nC\\movies\\2. React RMDB - Start Here\\src\\components\\hooks\\UseMovieFetch.js"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fecthData","endpoint","resut","fetch","json","console","log","result","creditsEndpoint","creditsResult"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AAAA,oBACVN,QAAQ,CAAC,EAAD,CADE;AAAA;AAAA,QAC7BO,KAD6B;AAAA,QACtBC,QADsB;;AAAA,qBAENR,QAAQ,CAAC,KAAD,CAFF;AAAA;AAAA,QAE7BS,OAF6B;AAAA,QAEpBC,UAFoB;;AAAA,qBAGVV,QAAQ,CAAC,KAAD,CAHE;AAAA;AAAA,QAG7BW,KAH6B;AAAA,QAGtBC,QAHsB;;AAKpC,QAAMC,SAAS,GAAGX,WAAW,CAAC,YAAY;AACtCU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACA,YAAMI,QAAQ,aAAMX,OAAN,mBAAsBG,OAAtB,sBAAyCF,OAAzC,CAAd;AACA,YAAMW,KAAK,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAApB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,YAAMC,eAAe,4BAAqBf,OAArB,8BAAgDF,OAAhD,CAArB;AACA,YAAMkB,aAAa,GAAG,MAAM,CAAC,MAAMN,KAAK,CAACK,eAAD,CAAZ,EAAgCJ,IAAhC,EAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYG,aAAZ;AAEH,KATD,CASE,OAAMX,KAAN,EAAa;AACXC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACGF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACP,GAjB4B,EAiB1B,CAACJ,OAAD,CAjB0B,CAA7B;AAmBAL,EAAAA,SAAS,CAAE,MAAM;AACbY,IAAAA,SAAS;AACZ,GAFQ,CAAT;AAIA,SAAO,CAACN,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACH,CA7BM","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { API_URL, API_KEY } from '../../config';\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n\r\n    const fecthData = useCallback(async () => {\r\n        setError(false);\r\n        setLoading(true);\r\n\r\n        try {\r\n            const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n            const resut = await (await fetch(endpoint)).json();\r\n            \r\n            console.log(result);\r\n            const creditsEndpoint = `{API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n            const creditsResult = await (await fetch(creditsEndpoint)). json();\r\n            console.log(creditsResult);\r\n\r\n        } catch(error) {\r\n            setError(true);\r\n        }\r\n            setLoading(false);\r\n    }, [movieId])\r\n\r\n    useEffect (() => {\r\n        fecthData();\r\n    })\r\n\r\n    return [state, loading, error];\r\n}"]},"metadata":{},"sourceType":"module"}